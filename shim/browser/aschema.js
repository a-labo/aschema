/**
 * A schema instance
 * @class ASchema
 */
'use strict';

var tv4 = require('tv4');

var uuid = require('uuid');

var iftype = require('iftype');
/** @lends ASchema */


function ASchema(schema) {
  var s = this;
  schema = schema || {};

  if (schema.toJSON) {
    schema = schema.toJSON();
  } // noinspection Eslint


  var __proto__ = s.__proto__; // noinspection Eslint

  s.__proto__ = Object.assign({
    schema: schema
  }, schema, __proto__);
}

ASchema.prototype = {
  /**
   * Validate values.
   * @param {object} values - Values to validate.
   * @param {object} [options] - Optional settings.
   * @returns {object|null} - Null if success.
   */
  validate: function validate(values) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var s = this;

    var _tv4$validateMultiple = tv4.validateMultiple(values, s),
        valid = _tv4$validateMultiple.valid,
        errors = _tv4$validateMultiple.errors;

    if (valid) {
      return null;
    }

    var assign = options.assign,
        _options$name = options.name,
        name = _options$name === void 0 ? 'SchemaError' : _options$name;
    var _s$schema = s.schema,
        schema = _s$schema === void 0 ? {} : _s$schema;
    var error = new Error("Validation failed with schema: ".concat(schema.title || schema.id || schema.description));
    return Object.assign(error, {
      id: uuid.v4(),
      name: name,
      errors: errors,
      schema: schema,
      values: values,
      engine: 'tv4'
    }, assign);
  },

  /**
   * Throw an error if validate failed
   * @throws Error
   */
  validateToThrow: function validateToThrow() {
    var s = this;
    var error = s.validate.apply(s, arguments);

    if (error) {
      throw error;
    }
  },

  /**
   * Create a clone instance.
   * @returns {ASchema}
   */
  clone: function clone() {
    var s = this;
    var schema = s.toJSON();
    return new ASchema(schema);
  },

  /**
   * Set values.
   * @param {object} values - Values to set
   * @returns {ASchema} - Returns self.
   */
  set: function set(values) {
    var s = this;

    if (arguments.length === 2) {
      values = {};
      var key = arguments[0];
      values[key] = arguments[1];
    }

    Object.assign(s, values);
    return s;
  },

  /**
   * Convert to json.
   * @returns {object} - JSON schema.
   */
  toJSON: function toJSON() {
    var s = this;
    var values = Object.assign({}, s.schema);
    Object.keys(values).forEach(function (key) {
      var isFunc = iftype.isFunction(values[key]);

      if (isFunc) {
        delete values[key];
      }
    });
    return values;
  }
};
Object.assign(ASchema, {
  tv4: tv4
});
module.exports = ASchema;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzY2hlbWEuanMiXSwibmFtZXMiOlsidHY0IiwicmVxdWlyZSIsInV1aWQiLCJpZnR5cGUiLCJBU2NoZW1hIiwic2NoZW1hIiwicyIsInRvSlNPTiIsIl9fcHJvdG9fXyIsIk9iamVjdCIsImFzc2lnbiIsInByb3RvdHlwZSIsInZhbGlkYXRlIiwidmFsdWVzIiwib3B0aW9ucyIsInZhbGlkYXRlTXVsdGlwbGUiLCJ2YWxpZCIsImVycm9ycyIsIm5hbWUiLCJlcnJvciIsIkVycm9yIiwidGl0bGUiLCJpZCIsImRlc2NyaXB0aW9uIiwidjQiLCJlbmdpbmUiLCJ2YWxpZGF0ZVRvVGhyb3ciLCJjbG9uZSIsInNldCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImtleSIsImtleXMiLCJmb3JFYWNoIiwiaXNGdW5jIiwiaXNGdW5jdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBS0E7O0FBRUEsSUFBTUEsR0FBRyxHQUFHQyxPQUFPLENBQUMsS0FBRCxDQUFuQjs7QUFDQSxJQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLElBQU1FLE1BQU0sR0FBR0YsT0FBTyxDQUFDLFFBQUQsQ0FBdEI7QUFFQTs7O0FBQ0EsU0FBU0csT0FBVCxDQUFrQkMsTUFBbEIsRUFBMEI7QUFDeEIsTUFBTUMsQ0FBQyxHQUFHLElBQVY7QUFDQUQsRUFBQUEsTUFBTSxHQUFHQSxNQUFNLElBQUksRUFBbkI7O0FBQ0EsTUFBSUEsTUFBTSxDQUFDRSxNQUFYLEVBQW1CO0FBQ2pCRixJQUFBQSxNQUFNLEdBQUdBLE1BQU0sQ0FBQ0UsTUFBUCxFQUFUO0FBQ0QsR0FMdUIsQ0FNeEI7OztBQU53QixNQU9sQkMsU0FQa0IsR0FPSkYsQ0FQSSxDQU9sQkUsU0FQa0IsRUFReEI7O0FBQ0FGLEVBQUFBLENBQUMsQ0FBQ0UsU0FBRixHQUFjQyxNQUFNLENBQUNDLE1BQVAsQ0FBYztBQUFFTCxJQUFBQSxNQUFNLEVBQU5BO0FBQUYsR0FB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LE1BQU0sR0FBRy9CLE1BQU0sQ0FBQ2dDLFVBQVAsQ0FBa0J0QixNQUFNLENBQUVrQixHQUFGLENBQXhCLENBQWI7O0FBQ0EsVUFBSUcsTUFBSixFQUFZO0FBQ1YsZUFBT3JCLE1BQU0sQ0FBRWtCLEdBQUYsQ0FBYjtBQUNEO0FBQ0YsS0FMRDtBQU1BLFdBQU9sQixNQUFQO0FBQ0Q7QUEvRWlCLENBQXBCO0FBa0ZBSixNQUFNLENBQUNDLE1BQVAsQ0FBY04sT0FBZCxFQUF1QjtBQUFFSixFQUFBQSxHQUFHLEVBQUhBO0FBQUYsQ0FBdkI7QUFFQW9DLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmpDLE9BQWpCIiwic291cmNlUm9vdCI6Ii4uLy4uL2xpYiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBzY2hlbWEgaW5zdGFuY2VcbiAqIEBjbGFzcyBBU2NoZW1hXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHR2NCA9IHJlcXVpcmUoJ3R2NCcpXG5jb25zdCB1dWlkID0gcmVxdWlyZSgndXVpZCcpXG5jb25zdCBpZnR5cGUgPSByZXF1aXJlKCdpZnR5cGUnKVxuXG4vKiogQGxlbmRzIEFTY2hlbWEgKi9cbmZ1bmN0aW9uIEFTY2hlbWEgKHNjaGVtYSkge1xuICBjb25zdCBzID0gdGhpc1xuICBzY2hlbWEgPSBzY2hlbWEgfHwge31cbiAgaWYgKHNjaGVtYS50b0pTT04pIHtcbiAgICBzY2hlbWEgPSBzY2hlbWEudG9KU09OKClcbiAgfVxuICAvLyBub2luc3BlY3Rpb24gRXNsaW50XG4gIGxldCB7IF9fcHJvdG9fXyB9ID0gc1xuICAvLyBub2luc3BlY3Rpb24gRXNsaW50XG4gIHMuX19wcm90b19fID0gT2JqZWN0LmFzc2lnbih7IHNjaGVtYSB9LCBzY2hlbWEsIF9fcHJvdG9fXylcbn1cblxuQVNjaGVtYS5wcm90b3R5cGUgPSB7XG4gIC8qKlxuICAgKiBWYWxpZGF0ZSB2YWx1ZXMuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSB2YWx1ZXMgLSBWYWx1ZXMgdG8gdmFsaWRhdGUuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gLSBPcHRpb25hbCBzZXR0aW5ncy5cbiAgICogQHJldHVybnMge29iamVjdHxudWxsfSAtIE51bGwgaWYgc3VjY2Vzcy5cbiAgICovXG4gIHZhbGlkYXRlICh2YWx1ZXMsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHMgPSB0aGlzXG4gICAgbGV0IHsgdmFsaWQsIGVycm9ycyB9ID0gdHY0LnZhbGlkYXRlTXVsdGlwbGUodmFsdWVzLCBzKVxuICAgIGlmICh2YWxpZCkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gICAgbGV0IHtcbiAgICAgIGFzc2lnbixcbiAgICAgIG5hbWUgPSAnU2NoZW1hRXJyb3InXG4gICAgfSA9IG9wdGlvbnNcbiAgICBsZXQgeyBzY2hlbWEgPSB7fSB9ID0gc1xuICAgIGxldCBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgIGBWYWxpZGF0aW9uIGZhaWxlZCB3aXRoIHNjaGVtYTogJHtzY2hlbWEudGl0bGUgfHwgc2NoZW1hLmlkIHx8IHNjaGVtYS5kZXNjcmlwdGlvbn1gXG4gICAgKVxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKGVycm9yLCB7XG4gICAgICBpZDogdXVpZC52NCgpLFxuICAgICAgbmFtZSxcbiAgICAgIGVycm9ycyxcbiAgICAgIHNjaGVtYSxcbiAgICAgIHZhbHVlcyxcbiAgICAgIGVuZ2luZTogJ3R2NCdcbiAgICB9LCBhc3NpZ24pXG4gIH0sXG4gIC8qKlxuICAgKiBUaHJvdyBhbiBlcnJvciBpZiB2YWxpZGF0ZSBmYWlsZWRcbiAgICogQHRocm93cyBFcnJvclxuICAgKi9cbiAgdmFsaWRhdGVUb1Rocm93ICguLi5hcmdzKSB7XG4gICAgY29uc3QgcyA9IHRoaXNcbiAgICBsZXQgZXJyb3IgPSBzLnZhbGlkYXRlKC4uLmFyZ3MpXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICB0aHJvdyBlcnJvclxuICAgIH1cbiAgfSxcbiAgLyoqXG4gICAqIENyZWF0ZSBhIGNsb25lIGluc3RhbmNlLlxuICAgKiBAcmV0dXJucyB7QVNjaGVtYX1cbiAgICovXG4gIGNsb25lICgpIHtcbiAgICBjb25zdCBzID0gdGhpc1xuICAgIGxldCBzY2hlbWEgPSBzLnRvSlNPTigpXG4gICAgcmV0dXJuIG5ldyBBU2NoZW1hKHNjaGVtYSlcbiAgfSxcbiAgLyoqXG4gICAqIFNldCB2YWx1ZXMuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSB2YWx1ZXMgLSBWYWx1ZXMgdG8gc2V0XG4gICAqIEByZXR1cm5zIHtBU2NoZW1hfSAtIFJldHVybnMgc2VsZi5cbiAgICovXG4gIHNldCAodmFsdWVzKSB7XG4gICAgY29uc3QgcyA9IHRoaXNcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgdmFsdWVzID0ge31cbiAgICAgIGxldCBrZXkgPSBhcmd1bWVudHNbIDAgXVxuICAgICAgdmFsdWVzWyBrZXkgXSA9IGFyZ3VtZW50c1sgMSBdXG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24ocywgdmFsdWVzKVxuICAgIHJldHVybiBzXG4gIH0sXG4gIC8qKlxuICAgKiBDb252ZXJ0IHRvIGpzb24uXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IC0gSlNPTiBzY2hlbWEuXG4gICAqL1xuICB0b0pTT04gKCkge1xuICAgIGNvbnN0IHMgPSB0aGlzXG4gICAgbGV0IHZhbHVlcyA9IE9iamVjdC5hc3NpZ24oe30sIHMuc2NoZW1hKVxuICAgIE9iamVjdC5rZXlzKHZhbHVlcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBsZXQgaXNGdW5jID0gaWZ0eXBlLmlzRnVuY3Rpb24odmFsdWVzWyBrZXkgXSlcbiAgICAgIGlmIChpc0Z1bmMpIHtcbiAgICAgICAgZGVsZXRlIHZhbHVlc1sga2V5IF1cbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiB2YWx1ZXNcbiAgfVxufVxuXG5PYmplY3QuYXNzaWduKEFTY2hlbWEsIHsgdHY0IH0pXG5cbm1vZHVsZS5leHBvcnRzID0gQVNjaGVtYVxuIl19