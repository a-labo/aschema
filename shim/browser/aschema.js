'use strict';

var tv4 = require('tv4');

var _require = require('uuid'),
    uuid = _require.v4;

var iftype = require('iftype');
/**
 * A schema instance
 * @class ASchema
 */


function ASchema(schema) {
  schema = schema || {};

  if (schema.toJSON) {
    schema = schema.toJSON();
  } // noinspection Eslint


  var __proto__ = this.__proto__; // noinspection Eslint

  this.__proto__ = Object.assign({
    schema: schema
  }, schema, __proto__);
}

ASchema.prototype = {
  /**
   * Validate values.
   * @param {object} values - Values to validate.
   * @param {object} [options] - Optional settings.
   * @returns {object|null} - Null if success.
   */
  validate: function validate(values) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var _tv4$validateMultiple = tv4.validateMultiple(values, this),
        valid = _tv4$validateMultiple.valid,
        errors = _tv4$validateMultiple.errors;

    if (valid) {
      return null;
    }

    var assign = options.assign,
        _options$name = options.name,
        name = _options$name === void 0 ? 'SchemaError' : _options$name;
    var _this$schema = this.schema,
        schema = _this$schema === void 0 ? {} : _this$schema;
    var error = new Error("Validation failed with schema: ".concat(schema.title || schema.id || schema.description));
    return Object.assign(error, {
      id: uuid(),
      name: name,
      errors: errors,
      schema: schema,
      values: values,
      engine: 'tv4'
    }, assign);
  },

  /**
   * Throw an error if validate failed
   * @throws Error
   */
  validateToThrow: function validateToThrow() {
    var error = this.validate.apply(this, arguments);

    if (error) {
      throw error;
    }
  },

  /**
   * Create a clone instance.
   * @returns {ASchema}
   */
  clone: function clone() {
    var schema = this.toJSON();
    return new ASchema(schema);
  },

  /**
   * Set values.
   * @param {object} values - Values to set
   * @returns {ASchema} - Returns self.
   */
  set: function set(values) {
    if (arguments.length === 2) {
      values = {};
      var key = arguments[0];
      values[key] = arguments[1];
    }

    Object.assign(this, values);
    return this;
  },

  /**
   * Convert to json.
   * @returns {object} - JSON schema.
   */
  toJSON: function toJSON() {
    var values = Object.assign({}, this.schema);
    Object.keys(values).forEach(function (key) {
      var isFunc = iftype.isFunction(values[key]);

      if (isFunc) {
        delete values[key];
      }
    });
    return values;
  }
};
Object.assign(ASchema, {
  tv4: tv4
});
module.exports = ASchema;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzY2hlbWEuanMiXSwibmFtZXMiOlsidHY0IiwicmVxdWlyZSIsInV1aWQiLCJ2NCIsImlmdHlwZSIsIkFTY2hlbWEiLCJzY2hlbWEiLCJ0b0pTT04iLCJfX3Byb3RvX18iLCJPYmplY3QiLCJhc3NpZ24iLCJwcm90b3R5cGUiLCJ2YWxpZGF0ZSIsInZhbHVlcyIsIm9wdGlvbnMiLCJ2YWxpZGF0ZU11bHRpcGxlIiwidmFsaWQiLCJlcnJvcnMiLCJuYW1lIiwiZXJyb3IiLCJFcnJvciIsInRpdGxlIiwiaWQiLCJkZXNjcmlwdGlvbiIsImVuZ2luZSIsInZhbGlkYXRlVG9UaHJvdyIsImNsb25lIiwic2V0IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwia2V5Iiwia2V5cyIsImZvckVhY2giLCJpc0Z1bmMiLCJpc0Z1bmN0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBRUE7O0FBRUEsSUFBTUEsR0FBRyxHQUFHQyxPQUFPLENBQUMsS0FBRCxDQUFuQjs7ZUFDa0JBLE9BQU8sQ0FBQyxNQUFELEM7SUFBZkMsSSxZQUFIQyxFOztBQUNQLElBQU1DLE1BQU0sR0FBR0gsT0FBTyxDQUFDLFFBQUQsQ0FBdEI7QUFFQTs7Ozs7O0FBSUEsU0FBU0ksT0FBVCxDQUFrQkMsTUFBbEIsRUFBMEI7QUFDeEJBLEVBQUFBLE1BQU0sR0FBR0EsTUFBTSxJQUFJLEVBQW5COztBQUNBLE1BQUlBLE1BQU0sQ0FBQ0MsTUFBWCxFQUFtQjtBQUNqQkQsSUFBQUEsTUFBTSxHQUFHQSxNQUFNLENBQUNDLE1BQVAsRUFBVDtBQUNELEdBSnVCLENBS3hCOzs7QUFMd0IsTUFNbEJDLFNBTmtCLEdBTUosSUFOSSxDQU1sQkEsU0FOa0IsRUFPeEI7O0FBQ0EsT0FBS0EsU0FBTCxHQUFpQkMsTUFBTSxDQUFDQyxNQUFQLENBQWM7QUFBRUosSUFBQUEsTUFBTSxFQUFOQTtBQUFGLEdBQWQsRUFBMEJBLE1BQTFCLEVBQWtDRSxTQUFsQyxDQUFqQjtBQUNEOztBQUVESCxPQUFP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QUhBO0FBQUYsQ0FBdkI7QUFFQW1DLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQi9CLE9BQWpCIiwic291cmNlUm9vdCI6Ii4uLy4uL2xpYiIsInNvdXJjZXNDb250ZW50IjpbIlxuXG4ndXNlIHN0cmljdCdcblxuY29uc3QgdHY0ID0gcmVxdWlyZSgndHY0JylcbmNvbnN0IHt2NDp1dWlkfSA9IHJlcXVpcmUoJ3V1aWQnKVxuY29uc3QgaWZ0eXBlID0gcmVxdWlyZSgnaWZ0eXBlJylcblxuLyoqXG4gKiBBIHNjaGVtYSBpbnN0YW5jZVxuICogQGNsYXNzIEFTY2hlbWFcbiAqL1xuZnVuY3Rpb24gQVNjaGVtYSAoc2NoZW1hKSB7XG4gIHNjaGVtYSA9IHNjaGVtYSB8fCB7fVxuICBpZiAoc2NoZW1hLnRvSlNPTikge1xuICAgIHNjaGVtYSA9IHNjaGVtYS50b0pTT04oKVxuICB9XG4gIC8vIG5vaW5zcGVjdGlvbiBFc2xpbnRcbiAgbGV0IHsgX19wcm90b19fIH0gPSB0aGlzXG4gIC8vIG5vaW5zcGVjdGlvbiBFc2xpbnRcbiAgdGhpcy5fX3Byb3RvX18gPSBPYmplY3QuYXNzaWduKHsgc2NoZW1hIH0sIHNjaGVtYSwgX19wcm90b19fKVxufVxuXG5BU2NoZW1hLnByb3RvdHlwZSA9IHtcbiAgLyoqXG4gICAqIFZhbGlkYXRlIHZhbHVlcy5cbiAgICogQHBhcmFtIHtvYmplY3R9IHZhbHVlcyAtIFZhbHVlcyB0byB2YWxpZGF0ZS5cbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSAtIE9wdGlvbmFsIHNldHRpbmdzLlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fG51bGx9IC0gTnVsbCBpZiBzdWNjZXNzLlxuICAgKi9cbiAgdmFsaWRhdGUgKHZhbHVlcywgb3B0aW9ucyA9IHt9KSB7XG4gICAgbGV0IHsgdmFsaWQsIGVycm9ycyB9ID0gdHY0LnZhbGlkYXRlTXVsdGlwbGUodmFsdWVzLCB0aGlzKVxuICAgIGlmICh2YWxpZCkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gICAgbGV0IHtcbiAgICAgIGFzc2lnbixcbiAgICAgIG5hbWUgPSAnU2NoZW1hRXJyb3InXG4gICAgfSA9IG9wdGlvbnNcbiAgICBsZXQgeyBzY2hlbWEgPSB7fSB9ID0gdGhpc1xuICAgIGxldCBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgIGBWYWxpZGF0aW9uIGZhaWxlZCB3aXRoIHNjaGVtYTogJHtzY2hlbWEudGl0bGUgfHwgc2NoZW1hLmlkIHx8IHNjaGVtYS5kZXNjcmlwdGlvbn1gXG4gICAgKVxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKGVycm9yLCB7XG4gICAgICBpZDogdXVpZCgpLFxuICAgICAgbmFtZSxcbiAgICAgIGVycm9ycyxcbiAgICAgIHNjaGVtYSxcbiAgICAgIHZhbHVlcyxcbiAgICAgIGVuZ2luZTogJ3R2NCdcbiAgICB9LCBhc3NpZ24pXG4gIH0sXG4gIC8qKlxuICAgKiBUaHJvdyBhbiBlcnJvciBpZiB2YWxpZGF0ZSBmYWlsZWRcbiAgICogQHRocm93cyBFcnJvclxuICAgKi9cbiAgdmFsaWRhdGVUb1Rocm93ICguLi5hcmdzKSB7XG4gICAgbGV0IGVycm9yID0gdGhpcy52YWxpZGF0ZSguLi5hcmdzKVxuICAgIGlmIChlcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3JcbiAgICB9XG4gIH0sXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBjbG9uZSBpbnN0YW5jZS5cbiAgICogQHJldHVybnMge0FTY2hlbWF9XG4gICAqL1xuICBjbG9uZSAoKSB7XG4gICAgY29uc3Qgc2NoZW1hID0gdGhpcy50b0pTT04oKVxuICAgIHJldHVybiBuZXcgQVNjaGVtYShzY2hlbWEpXG4gIH0sXG4gIC8qKlxuICAgKiBTZXQgdmFsdWVzLlxuICAgKiBAcGFyYW0ge29iamVjdH0gdmFsdWVzIC0gVmFsdWVzIHRvIHNldFxuICAgKiBAcmV0dXJucyB7QVNjaGVtYX0gLSBSZXR1cm5zIHNlbGYuXG4gICAqL1xuICBzZXQgKHZhbHVlcykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICB2YWx1ZXMgPSB7fVxuICAgICAgbGV0IGtleSA9IGFyZ3VtZW50c1sgMCBdXG4gICAgICB2YWx1ZXNbIGtleSBdID0gYXJndW1lbnRzWyAxIF1cbiAgICB9XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCB2YWx1ZXMpXG4gICAgcmV0dXJuIHRoaXNcbiAgfSxcbiAgLyoqXG4gICAqIENvbnZlcnQgdG8ganNvbi5cbiAgICogQHJldHVybnMge29iamVjdH0gLSBKU09OIHNjaGVtYS5cbiAgICovXG4gIHRvSlNPTiAoKSB7XG4gICAgbGV0IHZhbHVlcyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuc2NoZW1hKVxuICAgIE9iamVjdC5rZXlzKHZhbHVlcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBsZXQgaXNGdW5jID0gaWZ0eXBlLmlzRnVuY3Rpb24odmFsdWVzWyBrZXkgXSlcbiAgICAgIGlmIChpc0Z1bmMpIHtcbiAgICAgICAgZGVsZXRlIHZhbHVlc1sga2V5IF1cbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiB2YWx1ZXNcbiAgfVxufVxuXG5PYmplY3QuYXNzaWduKEFTY2hlbWEsIHsgdHY0IH0pXG5cbm1vZHVsZS5leHBvcnRzID0gQVNjaGVtYVxuIl19